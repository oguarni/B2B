# =====================================
# Docker Compose - Development
# =====================================

version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: b2b_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: b2b_marketplace_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: devpassword123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5434:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d b2b_marketplace_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - b2b_network

  redis:
    image: redis:7-alpine
    container_name: b2b_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - b2b_network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
      target: development
    container_name: b2b_backend_dev
    restart: unless-stopped
    ports:
      - "3001:3001"
      - "9229:9229"  # Node.js debugger port
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:devpassword123@postgres:5432/b2b_marketplace_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: DEV_A8x9K2mN5q7P1wT3uY6rE9sA2dF5gH8j
      JWT_REFRESH_SECRET: DEV_REFRESH_M6n5B4v3C2x1Z9y8A7s6D5f4G3h2J1k0
      JWT_EXPIRES_IN: 7d
      FRONTEND_URL: http://localhost:3000
      API_PREFIX: /api
      CORS_CREDENTIALS: "true"
      ALLOWED_ORIGINS: http://localhost:3000,http://127.0.0.1:3000
      LOG_LEVEL: debug
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 1000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/package*.json:/app/
      - backend_node_modules:/app/node_modules
      - ./backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - b2b_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    container_name: b2b_frontend_dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
      REACT_APP_API_URL: http://localhost:3001/api
      REACT_APP_NODE_ENV: development
      SKIP_PREFLIGHT_CHECK: "true"
      GENERATE_SOURCEMAP: "true"
      FAST_REFRESH: "true"
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/package*.json:/app/
      - frontend_node_modules:/app/node_modules
      - /app/build  # Exclude build directory
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - b2b_network

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  backend_node_modules:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  b2b_network:
    driver: bridge
    name: b2b_dev_network