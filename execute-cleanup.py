#!/usr/bin/env python3
"""
Execu√ß√£o controlada da limpeza de seguran√ßa
Demonstra o uso do git-filter-repo para remover secrets espec√≠ficos
"""

import os
import sys
import subprocess
import tempfile
import shutil
from pathlib import Path

def create_test_cleanup():
    """Cria um script de teste para demonstrar a limpeza"""
    
    script_content = '''#!/usr/bin/env python3
import re
import git_filter_repo as fr

# Contador de arquivos processados
processed_files = 0
modified_files = 0

def blob_callback(blob):
    global processed_files, modified_files
    processed_files += 1
    
    if not blob.data:
        return
    
    try:
        # Decodifica como texto
        content = blob.data.decode('utf-8')
        original_content = content
        
        # Substitui√ß√µes espec√≠ficas encontradas no c√≥digo
        replacements = [
            # JWT secrets que encontramos
            (r'your-super-secret-jwt-key-change-in-production', 'process.env.JWT_SECRET'),
            (r'your-secret-key', 'process.env.JWT_SECRET'),
            
            # Database URLs com senha
            (r'postgresql://postgres:password@postgres:5432', 'postgresql://postgres:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}'),
            (r'postgresql://postgres:password@localhost:5434', 'postgresql://postgres:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}'),
            
            # Admin email hardcoded
            (r'admin@b2bmarketplace\\.com', 'process.env.ADMIN_EMAIL'),
        ]
        
        # Aplica substitui√ß√µes
        for pattern, replacement in replacements:
            new_content = re.sub(pattern, replacement, content, flags=re.IGNORECASE)
            if new_content != content:
                print(f"  üîÑ Substituindo '{pattern}' em {blob.original_name}")
                content = new_content
        
        # Se houve mudan√ßas, atualiza o blob
        if content != original_content:
            blob.data = content.encode('utf-8')
            modified_files += 1
            
    except UnicodeDecodeError:
        # Arquivo bin√°rio, ignora
        pass

def run_cleanup(repo_path):
    """Executa a limpeza com git-filter-repo"""
    
    print(f"üßπ Iniciando limpeza do reposit√≥rio: {repo_path}")
    
    # Muda para o diret√≥rio do reposit√≥rio
    original_dir = os.getcwd()
    os.chdir(repo_path)
    
    try:
        # Configura e executa o filtro
        args = fr.FilteringOptions.parse_args(['--force'])
        filter_obj = fr.RepoFilter(args, blob_callback=blob_callback)
        filter_obj.run()
        
        print(f"‚úÖ Processados {processed_files} arquivos")
        print(f"üîÑ Modificados {modified_files} arquivos")
        
    finally:
        os.chdir(original_dir)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Uso: python3 cleanup_script.py <caminho-repositorio>")
        sys.exit(1)
    
    repo_path = sys.argv[1]
    run_cleanup(repo_path)
'''

    script_path = "/tmp/cleanup_script.py"
    with open(script_path, 'w') as f:
        f.write(script_content)
    
    os.chmod(script_path, 0o755)
    return script_path

def demo_dry_run():
    """Demonstra uma execu√ß√£o de teste"""
    
    repo_path = "/home/guarnieri/Desktop/Com√©rcio Eletr√¥nico/MarketPlace_B2B/B2B"
    
    print("üîç DEMONSTRA√á√ÉO - An√°lise de Vulnerabilidades Encontradas")
    print("=" * 60)
    
    # Lista vulnerabilidades encontradas
    vulnerabilities = [
        {
            "file": "backend/src/controllers/authController.js:170",
            "pattern": "your-super-secret-jwt-key-change-in-production",
            "risk": "CR√çTICO",
            "description": "JWT secret hardcoded"
        },
        {
            "file": "backend/middleware/auth.js:12", 
            "pattern": "your-secret-key",
            "risk": "CR√çTICO",
            "description": "Fallback JWT secret hardcoded"
        },
        {
            "file": ".env.example:5",
            "pattern": "postgresql://postgres:password@",
            "risk": "ALTO", 
            "description": "Database password em URL"
        }
    ]
    
    print("üìã Vulnerabilidades Identificadas:")
    for vuln in vulnerabilities:
        print(f"  üö® {vuln['risk']}: {vuln['file']}")
        print(f"     Pattern: {vuln['pattern']}")
        print(f"     Descri√ß√£o: {vuln['description']}")
        print()
    
    print("üõ†Ô∏è  Corre√ß√µes Aplicadas:")
    print("  ‚úÖ Removido hardcoded JWT secrets dos arquivos atuais")
    print("  ‚úÖ Configurado .gitignore para prevenir futuros commits")
    print("  ‚úÖ Criado .git-secrets-patterns para detec√ß√£o")
    print("  ‚úÖ Scripts de limpeza do hist√≥rico criados")
    
    print("\n‚ö†Ô∏è  PR√ìXIMAS A√á√ïES RECOMENDADAS:")
    print("  1. Revisar scripts de limpeza criados")
    print("  2. Fazer backup completo do reposit√≥rio")
    print("  3. Executar limpeza do hist√≥rico (requer confirma√ß√£o)")
    print("  4. Rotacionar todas as credenciais de seguran√ßa")
    print("  5. Configurar monitoramento cont√≠nuo")

def show_cleanup_commands():
    """Mostra comandos para executar a limpeza"""
    
    print("\nüìú COMANDOS PARA LIMPEZA COMPLETA:")
    print("=" * 40)
    
    commands = [
        "# 1. Fazer backup",
        "cp -r . ../backup_$(date +%Y%m%d_%H%M%S)",
        "",
        "# 2. Executar limpeza do hist√≥rico (CUIDADO!)",
        "./remove-secrets.sh",
        "",
        "# 3. Verificar resultado", 
        "git log --oneline -5",
        "git show --stat HEAD",
        "",
        "# 4. Force push (coordenar com equipe!)",
        "git push --force-with-lease --all",
        "git push --force-with-lease --tags",
        "",
        "# 5. Rotacionar credenciais",
        "# - Gerar novo JWT_SECRET",
        "# - Alterar senhas de banco", 
        "# - Renovar chaves de API"
    ]
    
    for cmd in commands:
        print(f"  {cmd}")

def main():
    print("üîí GIT-FILTER-REPO - Remo√ß√£o de Vulnerabilidades")
    print("=" * 50)
    
    # Demonstra√ß√£o
    demo_dry_run()
    
    # Comandos
    show_cleanup_commands()
    
    print("\nüìÅ Arquivos Criados:")
    files_created = [
        "security-cleanup.py - Script Python completo de limpeza",
        "remove-secrets.sh - Script Bash para remo√ß√£o de secrets", 
        ".git-secrets-patterns - Padr√µes para detec√ß√£o de secrets",
        ".gitignore - Atualizado com padr√µes de seguran√ßa",
        "SECURITY_CLEANUP_REPORT.md - Ser√° criado ap√≥s limpeza"
    ]
    
    for file_info in files_created:
        print(f"  üìÑ {file_info}")
    
    print("\n‚ö†Ô∏è  IMPORTANTE:")
    print("  ‚Ä¢ Backup foi recomendado mas N√ÉO executado automaticamente")
    print("  ‚Ä¢ Limpeza do hist√≥rico requer confirma√ß√£o manual") 
    print("  ‚Ä¢ Todos os colaboradores precisar√£o fazer fresh clone")
    print("  ‚Ä¢ Credenciais DEVEM ser rotacionadas ap√≥s a limpeza")

if __name__ == "__main__":
    main()